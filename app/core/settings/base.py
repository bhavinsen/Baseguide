"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
#import environ
from dotenv import load_dotenv
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration


#env = environ.Env()

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)
# print("*" * 10, PROJECT_DIR)
print("....", BASE_DIR)

#env.read_env(os.path.join(BASE_DIR,  "../.env"))
load_dotenv(dotenv_path=os.path.join(BASE_DIR,  "../.env"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    # "home",
    # "search",
    "user_profile",
    "authentication",
    "profiles",
    # "wagtail.contrib.forms",
    # "wagtail.contrib.redirects",
    # "wagtail.embeds",
    # "wagtail.sites",
    # "wagtail.users",
    # "wagtail.snippets",
    # "wagtail.documents",
    # "wagtail.images",
    # "wagtail.search",
    # "wagtail.admin",
    # "wagtail",
    "modelcluster",
    "taggit",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # djangorestframework
    'rest_framework',

    # Django SSO | https://pypi.org/project/django-sso/
    "django_sso.sso_gateway",
    'django_ses',
]

MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    # "wagtail.contrib.redirects.middleware.RedirectMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            # os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "core/templates"),
            os.path.join(BASE_DIR, "home/templates"),
            os.path.join(BASE_DIR, "authentication/templates"),
            os.path.join(BASE_DIR, "profile/templates"),
            os.path.join(BASE_DIR, "search/templates"),
            os.path.join(BASE_DIR, "user_profile/templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


WSGI_APPLICATION = "core.wsgi.application"

LOGIN_URL = '/sso/login'
LOGIN_REDIRECT_URL = '/'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


ENVIRONMENT = os.getenv('ENVIRONMENT' , 'dev')

if ENVIRONMENT == 'local':
    DATABASES = {
        "default": {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('LOCAL_DB_NAME'),
            'USER': os.getenv('LOCAL_DB_USER'),
            'PASSWORD': os.getenv('LOCAL_DB_PASSWORD'),
            'HOST': os.getenv('LOCAL_DB_HOST'),
            'PORT': 5432,
        }
    }

# For cockroach db
elif ENVIRONMENT == 'dev':
    DATABASES = {
        "default": {
            'ENGINE': 'django_cockroachdb',
            'NAME':     os.getenv( 'DB_NAME'),
            'USER':     os.getenv( 'DB_USER'),
            'PASSWORD': os.getenv( 'DB_PASSWORD'),
            'HOST':     os.getenv( 'DB_HOST'),
            'PORT':     os.getenv( 'DB_PORT'),
            'OPTIONS': {
                'sslmode': 'verify-full',
                'sslrootcert': './core/settings/cockroachlabs/root.crt',
            },
        }
    }

#override User models
AUTH_USER_MODEL = 'authentication.CustomUser'


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static"),
]

# ManifestStaticFilesStorage is recommended in production, to prevent outdated
# JavaScript / CSS assets being served from cache (e.g. after a Wagtail upgrade).
# See https://docs.djangoproject.com/en/4.1/ref/contrib/staticfiles/#manifeststaticfilesstorage
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"


# Wagtail settings

# WAGTAIL_SITE_NAME = "core"

# # Search
# # https://docs.wagtail.org/en/stable/topics/search/backends.html
# WAGTAILSEARCH_BACKENDS = {
#     "default": {
#         "BACKEND": "wagtail.search.backends.database",
#     }
# }

# # Base URL to use when referring to full URLs within the Wagtail admin backend -
# # e.g. in notification emails. Don't include '/admin' or a trailing slash
# WAGTAILADMIN_BASE_URL = "http://example.com"


# Django SSO | https://pypi.org/project/django-sso/
# SSO settings section in the gateway side are optional
# SSO = {
#     # Timeout for the communication with subordinated services. (OPTIONAL)
#     # This timeout is defined in seconds with a default value of 0.1s
#     # (100ms) per registered service.
#     'SUBORDINATE_COMMUNICATION_TIMEOUT': 0.1,

#     # Additional fields. (OPTIONAL). For more details look to part
#     # named as "Send additional data to subordinated services"
#     'ADDITIONAL_FIELDS': ('additiona_fields', 'from_user_model', 'and_related_models'),
# }

# Amazon SES settings
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_SES_REGION_NAME = os.getenv('AWS_SES_REGION_NAME')
AWS_SES_REGION_ENDPOINT = f'ses.{AWS_SES_REGION_NAME}.amazonaws.com'

# Email settings
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND')
EMAIL_HOST = AWS_SES_REGION_ENDPOINT
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')



sentry_sdk.init(
    dsn="https://f98164d5442f4fe99447a64485a41a31@o4505521761812480.ingest.sentry.io/4505521766727680",
    integrations=[DjangoIntegration()],

    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=1.0,

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True
)
